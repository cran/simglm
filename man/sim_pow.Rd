% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sim_pow.r
\name{sim_pow}
\alias{sim_pow}
\title{Master power simulation function.}
\usage{
sim_pow(fixed, random = NULL, random3 = NULL, fixed_param,
  random_param = list(NULL), random_param3 = list(NULL), cov_param,
  k = NULL, n, p = NULL, error_var, with_err_gen, arima = FALSE,
  data_str, cor_vars = NULL, fact_vars = list(NULL),
  unbal = list(level2 = FALSE, level3 = FALSE),
  unbal_design = list(level2 = NULL, level3 = NULL),
  lvl1_err_params = NULL, arima_mod = list(NULL), contrasts = NULL,
  homogeneity = TRUE, heterogeneity_var = NULL,
  cross_class_params = NULL, knot_args = list(NULL), missing = FALSE,
  missing_args = list(NULL), pow_param, alpha, pow_dist = c("z", "t"),
  pow_tail = c(1, 2), replicates, terms_vary = NULL,
  raw_power = TRUE, lm_fit_mod = NULL, lme4_fit_mod = NULL,
  nlme_fit_mod = NULL, arima_fit_mod = NULL, general_mod = NULL,
  general_extract = NULL, ...)
}
\arguments{
\item{fixed}{One sided formula for fixed effects in the simulation. 
To suppress intercept add -1 to formula.}

\item{random}{One sided formula for random effects in the simulation. 
Must be a subset of fixed.}

\item{random3}{One sided formula for random effects at third level in the 
simulation. Must be a subset of fixed (and likely of random).}

\item{fixed_param}{Fixed effect parameter values (i.e. beta weights). 
Must be same length as fixed.}

\item{random_param}{A list of named elements that must contain: 
\itemize{
   \item  random_var: variance of random parameters,
   \item  rand_gen: Name of simulation function for random effects.
}
       Optional elements are:
\itemize{
   \item ther: Theorectial mean and variance from rand_gen,
   \item ther_sim: Simulate mean/variance for standardization purposes,
   \item cor_vars: Correlation between random effects,
   \item ...: Additional parameters needed for rand_gen function.
 }}

\item{random_param3}{A list of named elements that must contain: 
\itemize{
    \item random_var: variance of random parameters,
    \item rand_gen: Name of simulation function for random effects.
}
      Optional elements are:
\itemize{
    \item ther: Theorectial mean and variance from rand_gen,
    \item ther_sim: Simulate mean/variance for standardization purposes,
    \item cor_vars: Correlation between random effects,
    \item ...: Additional parameters needed for rand_gen function.
}}

\item{cov_param}{List of arguments to pass to the continuous generating 
function, must be the same order as the variables specified in fixed. 
This list does not include intercept, time, factors, or 
interactions. Required arguments include:
\itemize{
  \item dist_fun: This is a quoted R distribution function.
  \item var_type: This is the level of variable to generate. Must be 
    either 'single', 'level1', 'level2', or 'level3'. 
    Must be same order as fixed formula above.
}
Optional arguments to the distribution functions are in a nested list,
 see the examples or vignettes for example code.}

\item{k}{Number of third level clusters.}

\item{n}{Cluster sample size.}

\item{p}{Within cluster sample size.}

\item{error_var}{Scalar of error variance.}

\item{with_err_gen}{Distribution function to pass on to the level one
simulation of errors.}

\item{arima}{TRUE/FALSE flag indicating whether residuals should 
be correlated. If TRUE, must specify a valid model to pass to 
arima.sim via the arima_mod argument. 
See \code{\link{arima.sim}} for examples.}

\item{data_str}{Type of data. Must be "cross", "long", or "single".}

\item{cor_vars}{A vector of correlations between variables.}

\item{fact_vars}{A nested list of factor, categorical, or ordinal variable 
   specification, each list must include:
\itemize{
     \item numlevels = Number of levels for ordinal or factor variables.
     \item var_type = Must be 'single', 'level1', 'level2', or 'level3'.
 }
 Optional arguments include:
 \itemize{
     \item replace
     \item prob
     \item value.labels
 }
  See also \code{\link{sample}} for use of these optional arguments.}

\item{unbal}{A named TRUE/FALSE list specifying whether unbalanced simulation 
design is desired. The named elements must be: "level2" or "level3" representing
unbalanced simulation for level two and three respectively. Default is FALSE,
indicating balanced sample sizes at both levels.}

\item{unbal_design}{When unbal = TRUE, this specifies the design for unbalanced
simulation in one of two ways. It can represent the minimum and maximum 
sample size within a cluster via a named list. This will be drawn from a 
random uniform distribution with min and max specified. 
Secondly, the actual sample sizes within each cluster
can be specified. This takes the form of a vector that must have the same length 
as the level two or three sample size. These are specified as a named list in which
level two sample size is controlled via "level2" and level three sample size is 
controlled via "level3".}

\item{lvl1_err_params}{Additional parameters passed as a list on to the 
level one error generating function}

\item{arima_mod}{A list indicating the ARIMA model to pass to arima.sim. 
See \code{\link{arima.sim}} for examples.}

\item{contrasts}{An optional list that specifies the contrasts to be used 
for factor variables (i.e. those variables with .f or .c). 
See \code{\link{contrasts}} for more detail.}

\item{homogeneity}{Either TRUE (default) indicating homogeneity of variance
assumption is assumed or FALSE to indicate desire to generate heterogeneity 
of variance.}

\item{heterogeneity_var}{Variable name as a character string to use for 
heterogeneity of variance simulation.}

\item{cross_class_params}{A list of named parameters when cross classified 
data structures are desired. Must include the following arguments:
 \itemize{
  \item num_ids: The number of cross classified clusters. These are in 
       addition to the typical cluster ids
  \item random_param: This argument is a list of arguments passed to 
     \code{\link{sim_rand_eff}}. These must include:
    \itemize{
     \item random_var: The variance of the cross classified random effect
     \item rand_gen: The random generating function used to generate the 
        cross classified random effect.
    }
    Optional elements are:
  \itemize{
      \item ther: Theorectial mean and variance from rand_gen,
      \item ther_sim: Simulate mean/variance for standardization purposes,
      \item cor_vars: Correlation between random effects,
      \item ...: Additional parameters needed for rand_gen function.
  } 
 }}

\item{knot_args}{A nested list of named knot arguments. See \code{\link{sim_knot}} 
for more details. Arguments must include:
  \itemize{
    \item var
    \item knot_locations
  }}

\item{missing}{TRUE/FALSE flag indicating whether missing data should be 
simulated.}

\item{missing_args}{Additional missing arguments to pass to the missing_data 
function. See \code{\link{missing_data}} for examples.}

\item{pow_param}{Number of parameter to calculate power includes intercept 
where applicable.}

\item{alpha}{What should the per test alpha rate be used for the hypothesis 
testing.}

\item{pow_dist}{Which distribution should be used when testing hypothesis 
test, z or t?}

\item{pow_tail}{One-tailed or two-tailed test?}

\item{replicates}{How many replications should be done (i.e. the denominator 
in power calculation).}

\item{terms_vary}{A named list of terms that should vary as a function for 
the power simulation. The names must match arguments to the simulation 
function, see \code{\link{sim_reg}} for examples. Values specified here 
should not be included as arguments in the function call.}

\item{raw_power}{TRUE/FALSE indicating whether raw power output should be 
returned. Default is TRUE, which will create a new nested column with 
raw data by variable(s) manipulated in power analysis.}

\item{lm_fit_mod}{Valid lm syntax to be used for model fitting.}

\item{lme4_fit_mod}{Valid lme4 syntax to be used for model fitting.}

\item{nlme_fit_mod}{Valid nlme syntax to be used for model fitting. 
This should be specified as a named list with fixed and random components.}

\item{arima_fit_mod}{Valid nlme syntax for fitting serial correlation structures.
See \code{\link{corStruct}} for help. This must be specified to 
include serial correlation.}

\item{general_mod}{Valid model syntax. This syntax can be from any R package. 
By default, broom is used to extract model result information. Note, 
package must be defined or loaded prior to running the sim_pow function.}

\item{general_extract}{A valid function to extract model results if 
general_mod argument is used. This argument is primarily used if extracting model
results is not possibly using the broom package. If this is left NULL (default), 
broom is used to collect model results.}

\item{...}{Currently not used.}
}
\description{
Input simulation conditions, returns power for term.
}
\details{
This function is a wrapper that replicates the simulation functions for 
simple regression and the linear mixed model power functions. This function 
replicates the power call a specified number of times and prints outs a 
matrix with the results.
}
\examples{

# single level example
fixed <- ~ 1 + act + diff + numCourse + act:numCourse
fixed_param <- c(0.5, 1.1, 0.6, 0.9, 1.1)
cov_param <- list(dist_fun = c('rnorm', 'rnorm', 'rnorm'),
                  var_type = c("single", "single", "single"),
                  opts = list(list(mean = 0, sd = 2),
                              list(mean = 0, sd = 2),
                              list(mean = 0, sd = 1)))
n <- 150
error_var <- 20
with_err_gen <- 'rnorm'
pow_param <- c('(Intercept)', 'act', 'diff', 'numCourse')
alpha <- .01
pow_dist <- "t"
pow_tail <- 2
replicates <- 2
power_out <- sim_pow(fixed = fixed, fixed_param = fixed_param, cov_param = cov_param,
                     n = n, error_var = error_var, with_err_gen = with_err_gen, 
                     data_str = "single", pow_param = pow_param, alpha = alpha,
                     pow_dist = pow_dist, pow_tail = pow_tail, 
                     replicates = replicates, raw_power = FALSE)
                     
# Vary terms example
fixed <- ~ 1 + act + diff + numCourse + act:numCourse
fixed_param <- c(0.5, 1.1, 0.6, 0.9, 1.1)
cov_param <- list(dist_fun = c('rnorm', 'rnorm', 'rnorm'),
                  var_type = c("single", "single", "single"),
                  opts = list(list(mean = 0, sd = 2),
                              list(mean = 0, sd = 2),
                              list(mean = 0, sd = 1)))
n <- NULL
error_var <- NULL
with_err_gen <- 'rnorm'
pow_param <- c('(Intercept)', 'act', 'diff', 'numCourse')
alpha <- .01
pow_dist <- "t"
pow_tail <- 2
replicates <- 1
terms_vary <- list(n = c(20, 40, 60, 80, 100), error_var = c(5, 10, 20))
power_out <- sim_pow(fixed = fixed, fixed_param = fixed_param, cov_param = cov_param,
                     n = n, error_var = error_var, with_err_gen = with_err_gen, 
                     data_str = "single", pow_param = pow_param, alpha = alpha,
                     pow_dist = pow_dist, pow_tail = pow_tail, 
                     replicates = replicates, terms_vary = terms_vary, 
                     raw_power = FALSE)

                         
# Three level example
fixed <- ~1 + time + diff + act + actClust + time:act
random <- ~1 + time 
random3 <- ~ 1 + time
fixed_param <- c(4, 2, 6, 2.3, 7, 0)
random_param <- list(random_var = c(7, 4), rand_gen = 'rnorm')
random_param3 <- list(random_var = c(4, 2), rand_gen = 'rnorm')
cov_param <- list(dist_fun = c('rnorm', 'rnorm', 'rnorm'),
                  var_type = c("level1", "level2", "level3"),
                  opts = list(list(mean = 0, sd = 1.5),
                              list(mean = 0, sd = 4), 
                              list(mean = 0, sd = 2)))
k <- 10
n <- 15
p <- 5
error_var <- 4
with_err_gen <- 'rnorm'
data_str <- "long"
pow_param <- c('time', 'diff', 'act', 'actClust')
alpha <- .01
pow_dist <- "z"
pow_tail <- 2
replicates <- 1
power_out <- sim_pow(fixed = fixed, random = random, random3 = random3,
                     fixed_param = fixed_param, 
                     random_param = random_param, 
                     random_param3 = random_param3, 
                     cov_param = cov_param, 
                     k = k, n = n, p = p,
                     error_var = error_var, with_err_gen = "rnorm",
                     data_str = data_str, 
                     unbal = list(level3 = FALSE, level2 = FALSE), 
                     pow_param = pow_param, alpha = alpha,
                     pow_dist = pow_dist, pow_tail = pow_tail, 
                     replicates = replicates, raw_power = FALSE)

}
